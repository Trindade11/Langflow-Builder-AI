====================================
Guia R√°pido de Git e GitHub para Iniciantes
====================================

Autor: Rodrigo Trindade
Projeto: Langflow-Builder-AI
Reposit√≥rio: https://github.com/Trindade11/Langflow-Builder-AI.git

--------------------------------------------------
üìå O QUE √â GIT E GITHUB? (CONCEITOS SIMPLES)
--------------------------------------------------

- **Reposit√≥rio Local:** Uma pasta no SEU computador onde o Git guarda o hist√≥rico do seu projeto.
- **Reposit√≥rio Remoto (GitHub):** Uma c√≥pia do seu projeto guardada na internet (no site do GitHub). Serve como backup e para compartilhar.

- **CLONAR (`git clone`):** √â como fazer o download do projeto do GitHub para o seu computador PELA PRIMEIRA VEZ.
- **PUXAR (`git pull`):** √â como ATUALIZAR seu projeto local com as √∫ltimas novidades que est√£o no GitHub. Importante para n√£o trabalhar em cima de coisa antiga!
- **ADICIONAR (`git add`):** Depois de modificar ou criar arquivos, voc√™ usa este comando para dizer ao Git: "Estes s√£o os arquivos que eu quero preparar para salvar no hist√≥rico".
- **COMMIT (`git commit`):** √â como TIRAR UMA FOTO (um "snapshot") do seu projeto em um momento espec√≠fico. Voc√™ guarda essa "foto" com uma MENSAGEM explicando o que mudou.
- **ENVIAR (`git push`):** Depois de fazer um ou mais "commits" (as "fotos"), voc√™ usa este comando para ENVIAR essas "fotos" para o GitHub, atualizando o projeto na internet.
- **BRANCH:** Imagine uma √°rvore com galhos. `main` (ou `master`) √© o tronco principal. Branches s√£o galhos onde voc√™ pode trabalhar em coisas novas sem mexer no tronco principal at√© estar pronto.

--------------------------------------------------
üöÄ PRIMEIRA VEZ NO SEU COMPUTADOR: CLONAR O REPOSIT√ìRIO
--------------------------------------------------
# 1. Abra o terminal (ou PowerShell, Git Bash, etc.)
# 2. Navegue at√© a pasta onde voc√™ quer que o projeto fique (ex: Documentos/Projetos)
# 3. Copie e cole o comando abaixo:
git clone https://github.com/Trindade11/Langflow-Builder-AI.git

# 4. Entre na pasta do projeto que foi criada:
cd Langflow-Builder-AI

--------------------------------------------------
üì• ANTES DE COME√áAR A TRABALHAR (OU QUANDO VOLTAR AO PROJETO):
ATUALIZE SEU PROJETO LOCAL COM O QUE EST√Å NO GITHUB
--------------------------------------------------
# √â MUITO IMPORTANTE fazer isso ANTES de fazer suas pr√≥prias altera√ß√µes!
# Isso baixa qualquer atualiza√ß√£o que outra pessoa (ou voc√™ mesmo em outro computador) tenha enviado para o GitHub.
git pull origin main

--------------------------------------------------
‚úçÔ∏è COMO SALVAR E ENVIAR SUAS ALTERA√á√ïES PARA O GITHUB
--------------------------------------------------

# PASSO 0: SALVE TUDO NO SEU EDITOR DE C√ìDIGO!
# O Git n√£o adivinha o que est√° s√≥ na tela do editor, os arquivos precisam estar salvos no disco.

# PASSO 1: VERIFIQUE O QUE MUDOU (OPCIONAL, MAS √öTIL)
# Este comando mostra uma lista dos arquivos que voc√™ alterou, criou ou apagou.
# Ajuda a ter certeza do que voc√™ est√° prestes a enviar.
git status

# PASSO 2: ADICIONE AS ALTERA√á√ïES PARA O PR√ìXIMO "COMMIT"
# O ponto (.) significa "adicione tudo que mudou nesta pasta e subpastas".
# Se quiser adicionar um arquivo espec√≠fico: git add nome_do_arquivo.txt
git add .

# PASSO 3: FA√áA O "COMMIT" (TIRE A "FOTO" DAS SUAS ALTERA√á√ïES)
# A mensagem depois de -m "..." √© MUITO IMPORTANTE.
# Ela deve ser curta, mas explicar BEM o que voc√™ fez neste conjunto de altera√ß√µes.
# Exemplos de boas mensagens:
#   git commit -m "Corrige bug na fun√ß√£o de login"
#   git commit -m "Adiciona novo componente de busca de clientes"
#   git commit -m "Atualiza documenta√ß√£o do usu√°rio com novas imagens"
git commit -m "Descreva aqui as principais altera√ß√µes que voc√™ fez"

# PASSO 4: ENVIE O "COMMIT" (E QUALQUER OUTRO QUE ESTEJA PENDENTE) PARA O GITHUB
# Este comando pega os "commits" que voc√™ fez no seu computador e os envia para o GitHub.
# `origin` √© geralmente o nome padr√£o do seu reposit√≥rio remoto no GitHub.
# `main` √© o nome do branch principal para onde voc√™ est√° enviando.
git push origin main

# Se o Git pedir usu√°rio e senha, use suas credenciais do GitHub.

--------------------------------------------------
‚ùì E SE EU ESQUECER DE FAZER `git pull` ANTES DE COME√áAR?
--------------------------------------------------
# Se voc√™ fizer altera√ß√µes e tentar fazer `git push` sem ter feito `git pull` antes,
# e outra pessoa (ou voc√™ em outro PC) tiver enviado algo para o GitHub nesse meio tempo,
# o Git pode reclamar e n√£o deixar voc√™ fazer o `push` direto.
# Ele geralmente sugere que voc√™ fa√ßa `git pull` primeiro.
# Ao fazer `git pull` nesse momento, o Git tentar√° mesclar (juntar) as altera√ß√µes.
# Se as altera√ß√µes forem em partes diferentes dos arquivos, ele costuma conseguir sozinho.
# Se forem nas mesmas linhas, pode ocorrer um "CONFLITO". Resolver conflitos √© um t√≥pico
# um pouco mais avan√ßado, mas o Git geralmente te mostra os arquivos com problema.
# POR ISSO √â MELHOR SEMPRE FAZER `git pull` ANTES DE MODIFICAR!

--------------------------------------------------
üß© OUTROS COMANDOS √öTEIS (PARA CONSULTA)
--------------------------------------------------

git branch                # Mostra em qual "branch" (ramo) voc√™ est√° (normalmente: main)
git log                   # Mostra o hist√≥rico de "commits" (as "fotos" que voc√™ tirou)
git remote -v             # Mostra o endere√ßo do seu reposit√≥rio remoto no GitHub

--------------------------------------------------
‚ö†Ô∏è SOBRE WARNINGS DE LF/CRLF (QUEBRAS DE LINHA)
--------------------------------------------------

# Se voc√™ vir um aviso como "LF will be replaced by CRLF", isso √© sobre como o Windows
# e outros sistemas (Linux/Mac) escrevem o final das linhas em arquivos de texto.
# O Git tenta padronizar isso para evitar problemas. Normalmente, voc√™ pode ignorar
# este aviso se o resto do comando funcionar. N√£o afeta o c√≥digo.

--------------------------------------------------
‚úîÔ∏è LEMBRETE DE OURO!
--------------------------------------------------

Sempre execute:
git pull origin main
ANTES de come√ßar a modificar arquivos no projeto!
Isto pode te poupar de muitas dores de cabe√ßa com conflitos.

